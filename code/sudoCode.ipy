{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#1.16.6 try this version\n",
    "\n",
    "import numpy as np\n",
    "np.__version__\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from skimage.io import imread\n",
    "from sift import SIFT\n",
    "import numpy as np\n",
    "import argparse\n",
    "import pickle\n",
    "import os\n",
    "from os.path import isdir\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "im = imread(\"test.jpg\")\n",
    "\n",
    "sift_detector = SIFT(im)\n",
    "_ = sift_detector.get_features()\n",
    "kp_pyr = sift_detector.kp_pyr\n",
    "\n",
    "if not isdir('results'):\n",
    "    os.mkdir('results')\n",
    "\n",
    "# pickle.dump(sift_detector.kp_pyr, open('results/%s_kp_pyr.pkl' % \"\", 'wb'))\n",
    "_, ax = plt.subplots(1, sift_detector.num_octave)\n",
    "\n",
    "for i in range(sift_detector.num_octave):\n",
    "    ax[i].imshow(im)\n",
    "\n",
    "    scaled_kps = kp_pyr[i] * (2**i)\n",
    "    ax[i].scatter(scaled_kps[:,0], scaled_kps[:,1], c='r', s=2.5)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "# print kp_pyr[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print sift_detector.get_features()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.cluster import AgglomerativeClustering\n",
    "import numpy as np\n",
    "from collections import Counter\n",
    "# X=np.array(kp_pyr[0][:,0],kp_pyr[0][:,1])\n",
    "clustering = AgglomerativeClustering(n_clusters=3).fit(kp_pyr[1][:,0:1])\n",
    "print Counter(clustering.labels_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "l=[]\n",
    "l.append(len(kp_pyr[0]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "l.append(len(kp_pyr[1]))\n",
    "l.append(len(kp_pyr[2]))\n",
    "l.append(len(kp_pyr[3]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.bar([1,2,3,4],l)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.plot([0.6,0.7,0.8,0.9],[40,50,55,70])\n",
    "plt.xlabel(\"Threshold\")\n",
    "plt.ylabel(\"Number of Keypoints\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "descriptor=sift_detector.get_features()[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import math\n",
    "import matplotlib.image as mpimg\n",
    "from PIL import Image, ImageDraw\n",
    "\n",
    "im = Image.open(\"test.jpg\")\n",
    "ans=[]\n",
    "draw = ImageDraw.Draw(im)\n",
    "for i in range(len(descriptor)):\n",
    "    res=[]\n",
    "    res90=[]\n",
    "    res180=[]\n",
    "    res270=[]\n",
    "    octave=0\n",
    "    for j in range(len(descriptor)):\n",
    "        if i==j:\n",
    "            continue\n",
    "        descriptor[i]\n",
    "        temp=0\n",
    "        temp90=0\n",
    "        temp180=0\n",
    "        temp270=0\n",
    "        \n",
    "        for k in range(len(descriptor[i])):\n",
    "            temp+=(descriptor[i][k]-descriptor[j][k])**2\n",
    "            if kp_pyr[octave][i][0]*(2**octave)!=kp_pyr[octave][j][0]*(2**octave) or kp_pyr[octave][j][1]*(2**octave)!=kp_pyr[octave][i][1]*(2**octave):\n",
    "                res.append([math.sqrt(temp),i,j])\n",
    "    \n",
    "        for a in range(4):\n",
    "            for b in range(4):\n",
    "                for c in range(8):\n",
    "                    temp270+=(descriptor[i][a*4*8+b*8+c]-descriptor[j][b*4*8+a*8+c])**2;\n",
    "                    if kp_pyr[octave][i][0]*(2**octave)!=kp_pyr[octave][j][0]*(2**octave) or kp_pyr[octave][j][1]*(2**octave)!=kp_pyr[octave][i][1]*(2**octave):\n",
    "                        res270.append([math.sqrt(temp270),i,j])\n",
    " \n",
    "        for a in range(4):\n",
    "                for b in range(4):\n",
    "                    for c in range(8):\n",
    "                        temp180+=(descriptor[i][a*4*8+b*8+c]-descriptor[j][(3-a)*4*8+b*8+c])**2;\n",
    "                        if kp_pyr[octave][i][0]*(2**octave)!=kp_pyr[octave][j][0]*(2**octave) or kp_pyr[octave][j][1]*(2**octave)!=kp_pyr[octave][i][1]*(2**octave):\n",
    "                            res180.append([math.sqrt(temp180),i,j])\n",
    "\n",
    "        for a in range(4):\n",
    "                for b in range(4):\n",
    "                    for c in range(8):\n",
    "                        temp90+=(descriptor[i][a*4*8+b*8+c]-descriptor[j][b*4*8+(3-a)*8+c])**2;\n",
    "                        if kp_pyr[octave][i][0]*(2**octave)!=kp_pyr[octave][j][0]*(2**octave) or kp_pyr[octave][j][1]*(2**octave)!=kp_pyr[octave][i][1]*(2**octave):\n",
    "                            res90.append([math.sqrt(temp90),i,j])\n",
    "    res90.sort()\n",
    "    res180.sort()\n",
    "    res270.sort()\n",
    "    res.sort()\n",
    "    thres=0.95\n",
    "    thres1=0.70\n",
    "    rat=res[0][0]/max(res[1][0],.00001)\n",
    "    temp=octave\n",
    "    if rat>thres1:\n",
    "#         print rat\n",
    "        ans.append(rat)\n",
    "        draw.line((kp_pyr[temp][i][0]*(2**temp), kp_pyr[temp][i][1]*(2**temp), kp_pyr[temp][res[0][2]][0]*(2**temp), kp_pyr[temp][res[0][2]][1]*(2**temp)), fill=128)\n",
    "    rat=res90[0][0]/max(res90[1][0],.00001)\n",
    "    if rat>thres1:\n",
    "#         print rat\n",
    "        ans.append(rat)\n",
    "        draw.line((kp_pyr[temp][i][0]*(2**temp), kp_pyr[temp][i][1]*(2**temp), kp_pyr[temp][res90[0][2]][0]*(2**temp), kp_pyr[temp][res90[0][2]][1]*(2**temp)), fill=128)\n",
    "    rat=res180[0][0]/max(res180[1][0],.00001)\n",
    "    if rat>thres1:\n",
    "#         print rat\n",
    "        ans.append(rat)\n",
    "        draw.line((kp_pyr[temp][i][0]*(2**temp), kp_pyr[temp][i][1]*(2**temp), kp_pyr[temp][res180[0][2]][0]*(2**temp), kp_pyr[temp][res180[0][2]][1]*(2**temp)), fill=128)\n",
    "    rat=res270[0][0]/max(res270[1][0],.00001)\n",
    "    if rat>thres1:\n",
    "#         print rat\n",
    "        ans.append(rat)\n",
    "        draw.line((kp_pyr[temp][i][0]*(2**temp), kp_pyr[temp][i][1]*(2**temp), kp_pyr[temp][res270[0][2]][0]*(2**temp), kp_pyr[temp][res270[0][2]][1]*(2**temp)), fill=128)\n",
    "    \n",
    "im.save(\"drawn_grid.png\")\n",
    "print len(ans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "'''\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot([0.80, 0.82, 0.84, 0.86,0.88], [14,19,27,29,45])\n",
    "plt.plot([0.80, 0.82, 0.84, 0.86,0.88], [55,66,91,148,228])\n",
    "plt.show()\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "'''\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "data = [[30, 25, 50, 20],\n",
    "[40, 23, 51, 17],\n",
    "[35, 22, 45, 19]]\n",
    "X = np.arange(4)\n",
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "ax.set_xlabel('threshold')\n",
    "ax.set_ylabel('Number of matched points')\n",
    "ax.bar([0.80, 0.82, 0.84, 0.86,0.88], [73,78,145,199,296], color = 'b', width = 0.005)\n",
    "ax.bar([0.805, 0.825, 0.845, 0.865,0.885], [99,115,163,251,320], color = 'g', width = 0.005)\n",
    "plt.show()\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def kum_value():\n",
    "    for i in range(1,length(kend),2):\n",
    "        si(ceil(kend(i)/6),ceil(kend(i+1)/6))= si(ceil(kend(i)/6),ceil(kend(i+1)/6))+1\n",
    "        no_of_key_points=length(kend)/2;\n",
    "        key_points_density=no_of_key_points/(ceil(n/6)*ceil(m/6));\n",
    "        kum_square=0;\n",
    "        for i in range(1,ceil(m/6)):\n",
    "            for j in range(1,ceil(n/6)):\n",
    "                kum_square=kum_square+\n",
    "                (key_points_density-si(i,j))*(key_points_density-si(i,j))\n",
    "            kum=sqrt(kum_square/no_of_key_points)\n",
    "            thres=thres/2;\n",
    "            if kum <0.3\n",
    "                break;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for x=0:45:359\n",
    "        magcount=0\n",
    "        for i in range(-4,4)\n",
    "            for j in range(-floor(sqrt(16-i*i)),floor(sqrt(16-i*i)))\n",
    "                \n",
    "                ch1=-180+x\n",
    "                ch2=-180+45+x\n",
    "                if ch1<0  ||  ch2<0\n",
    "                    if (k1+i)>0 && (j1+j)>0 \n",
    "                    && (k1+i)<m && (j1+j)<n:\n",
    "                        \n",
    "                        if abs(oric(k1+i,j1+j))<abs(ch1) \n",
    "                        && abs(oric(k1+i,j1+j))>=abs(ch2):\n",
    "                            if (oric(k1+i,j1+j))>=(ch1) \n",
    "                            && oric(k1+i,j1+j)<(ch2):\n",
    "                                if i<=0 && j<=0:\n",
    "                                    if abs(i)>abs(j)\n",
    "#                                         y=2 finding x\n",
    "                                        if i*i+j*j<=1:\n",
    "                                            c(2*8+floor(x/45)+1)\n",
    "                                            =c(2*8+floor(x/45)+1)+mag(k1+i,j1+j)\n",
    "                                        elif i*i+j*j <=4:\n",
    "                                            c(6*8+floor(x/45)+1)\n",
    "                                            =c(6*8+floor(x/45)+1)+mag(k1+i,j1+j)\n",
    "                                        elif i*i+j*j <=9: \n",
    "                                            c(10*8+floor(x/45)+1)\n",
    "                                            =c(10*8+floor(x/45)+1)+mag(k1+i,j1+j)\n",
    "                                        elif i*i+j*j <=16: \n",
    "                                            c(14*8+floor(x/45)+1)\n",
    "                                            =c(14*8+floor(x/45)+1)+mag(k1+i,j1+j) \n",
    "                                else:\n",
    "#                                 y=1 finding x\n",
    "                                    if i*i+j*j <=1:\n",
    "                                        c(1*8+floor(x/45)+1)=\n",
    "                                        c(1*8+floor(x/45)+1)+mag(k1+i,j1+j)\n",
    "                                    \n",
    "                                    elif i*i+j*j <=4:\n",
    "                                        c(5*8+floor(x/45)+1)\n",
    "                                        =c(5*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                   \n",
    "                                    \n",
    "                                    elif i*i+j*j <=9: \n",
    "                                        c(9*8+floor(x/45)+1)\n",
    "                                        =c(9*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                    elif i*i+j*j<=16:\n",
    "                                        c(13*8+floor(x/45)+1)\n",
    "                                        =c(13*8+floor(x/45)+1)+mag(k1+i,j1+j);   \n",
    "\n",
    "                            if i>=0 && j<=0:\n",
    "                                if abs(i)>=abs(j)\n",
    "                               %y=0 finding x\n",
    "                                    if i*i+j*j<=1:\n",
    "                                        \n",
    "                                        c(0*8+floor(x/45)+1)\n",
    "                                        =c(0*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                    \n",
    "                                    elif i*i+j*j <=4:\n",
    "                                        c(4*8+floor(x/45)+1)\n",
    "                                        =c(4*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                   \n",
    "                                    \n",
    "                                    elif i*i+j*j <= 9:\n",
    "                                        c(8*8+floor(x/45)+1)\n",
    "                                        =c(8*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                           \n",
    "                                \n",
    "                                    elif i*i+j*j <=16:\n",
    "                                    c(12*8+floor(x/45)+1)\n",
    "                                    =c(12*8+floor(x/45)+1)+mag(k1+i,j1+j);   \n",
    "                                    end\n",
    "                           \n",
    "                                else:\n",
    "                                #y= 1\n",
    "                                    if i*i+j*j<=1:\n",
    "                                        c(1*8+floor(x/45)+1)\n",
    "                                        =c(1*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                    \n",
    "                                    elif i*i+j*j <=4:\n",
    "                                        c(5*8+floor(x/45)+1)\n",
    "                                        =c(5*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                   \n",
    "                                    \n",
    "                                    elif i*i+j*j <= 9:\n",
    "                                        c(9*8+floor(x/45)+1)\n",
    "                                        =c(9*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                               \n",
    "                                \n",
    "                                    elif i*i+j*j <=16:\n",
    "                                        c(13*8+floor(x/45)+1)\n",
    "                                        =c(13*8+floor(x/45)+1)+mag(k1+i,j1+j);   \n",
    "                                    \n",
    "                                \n",
    "                            \n",
    "                        \n",
    "                            if i>=0 && j>=0:\n",
    "                                if abs(i)>abs(j):\n",
    "                                \n",
    "                                    if i*i+j*j<=1:\n",
    "                                      \n",
    "                                        c(0*8+floor(x/45)+1)=\n",
    "                                        c(0*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                    \n",
    "                                    elif i*i+j*j <=4:\n",
    "                                        c(4*8+floor(x/45)+1)\n",
    "                                        =c(4*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                   \n",
    "                                    \n",
    "                                    elif i*i+j*j <= 9:\n",
    "                                        c(8*8+floor(x/45)+1)\n",
    "                                        =c(8*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                               \n",
    "                                    \n",
    "                                    elif i*i+j*j <=16:\n",
    "                                        c(12*8+floor(x/45)+1)\n",
    "                                        =c(12*8+floor(x/45)+1)+mag(k1+i,j1+j);   \n",
    "\n",
    "                                else:\n",
    "                              \n",
    "                                    if i*i+j*j <=1:\n",
    "                                        c(3*8+floor(x/45)+1)\n",
    "                                        =c(3*8+floor(x/45)+1)+mag(k1+i,j1+j);\n",
    "                                    \n",
    "                                    elif i*i+j*j <=4:\n",
    "                                        c(7*8+floor(x/45)+1)\n",
    "                                        =c(7*8+floor(x/45)+1)+mag(k1+i,j1+j);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
